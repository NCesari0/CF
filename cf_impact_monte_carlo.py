# -*- coding: utf-8 -*-
"""CF Impact Monte Carlo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gd0FQwb02FAG-JeqmCGvN-vyT9y4FJVT

Import Packages
"""

import pandas as pd
import numpy as np
import seaborn as sns
import itertools as it
import matplotlib.pyplot as plt
sns.set_style('whitegrid')

"""Read .csv"""

df = pd.read_csv(r'/content/CF LCA Raw Data - Raw Results (1).csv', na_values=['#DIV/0!'], header=[0,0])
#print(df.iloc[2,:])

ingredrow = df.iloc[1,3:29]
amountrow = df.iloc[2,3:29]
improw = df.iloc[3:13,0]
print(len(amountrow))

"""Impact / Amount DataFrame"""

# Capture every Imp / Amount into one list
col = 2
row = 2
imp_amolist = []
for amount in amountrow:
  col = col + 1
  row = row + 1
  for imp in df.iloc[3:13,col]:
    imp_amo = float(imp) / float(amount)
    imp_amolist.append(imp_amo)
  if col == 29:
    break

# Create an array with a column for each Imp / Amount
imp_amoarr = np.array(imp_amolist).reshape(-1,10)
imp_amodf = pd.DataFrame(imp_amoarr)
imp_amodf.columns = ['Acidification','Ecotoxicity','Eutrophication','GWA:excl_bc','GWA:incl_bc','HHPA','HT_c','HT_non-c','Res:Fossil Fuels','Smog']

"""MC Function Backend"""

newimplist = []
mmmlist = []
minmaxmean = ['Min','Max','Mean']
# Function for 1D List to 2D List
def to_matrix(l, n):
  return [l[i:i+n] for i in range(0, len(l), n)]

# Monte Carlo Function

for i_a in imp_amodf.iloc[0]: # = for every Impact / Amount per specific ingredient
      mu = float(amountrow[0]) # = amount for ingredient
      std = mu*0.3
      low, high = mu - std, mu + std
      normamo = np.random.uniform(low, high, 10000) # 10000 simulations requested

      count, bins, ignored = plt.hist(normamo, 100, density=True)
      plt.plot(bins, 1/(std * np.sqrt(2 * np.pi)) * np.exp( - (bins - mu)**2 / (2 * std**2) ), linewidth=2, color='r')

      for samo in normamo: # = for every simulated amount of ingredient
        newimp = i_a * samo
        newimplist.append(newimp)

  # Go from 1D List to 2D list
i_list = to_matrix(newimplist,10000) # <-- n = N

index_list = ['Acidification','Ecotoxicity','Eutrophication','GWA:excl_bc','GWA:incl_bc','HHPA','HT_c','HT_non-c','Res:Fossil Fuels','Smog']
iter_il = iter(index_list)

# Make Dataframe of New Impact Factors
idf = pd.DataFrame(i_list, index = index_list)
idf2 = idf.T
#print(i_list)
#print(idf2)
  # Loop through New Imp DataFrame
for val in range(0,10,1):
    index = next(iter_il)
    idf3 = idf2[index]
    imin = idf3.min()
    imax = idf3.max()
    imean = np.mean(idf3)
    mmmlist.append(imin)
    mmmlist.append(imax)
    mmmlist.append(imean)
    # Other method
    #mmm = [imin,imax,imean]
    #new_dict = {minmaxmean: mmm for minmaxmean, mmm in zip(minmaxmean, mmm)}
    #mmmlist.append(new_dict)

  # Go from 1D List to 2D list
#mmm_2D = to_matrix(mmmlist,3) # <-- n = N
#new_dict = {index_list: mmmlist for index_list, mmmlist in zip(index_list, mmmlist)}

#print(new_dict)

#idf4 = pd.DataFrame(mmm_2D, index = index_list, columns=['Min','Max','Mean'])
idf4 = pd.DataFrame(mmmlist)
idf5= idf4.T
#print(idf5)
'''
idf5['Flower Type'] = index_list
idf6 = idf5.set_index('Flower Type', append=True).unstack('Flower Type')
print(idf6)
'''

"""Monte Carlo Function"""

from numpy.core.fromnumeric import mean
import matplotlib.pyplot as plt


# Function for 1D List to 2D List
def to_matrix(l, n):
  return [l[i:i+n] for i in range(0, len(l), n)]

# Monte Carlo Function
def monte_carlo(ingrednum,sim_num):
  newimplist = []
  mmmlist = []
  for i_a in imp_amodf.iloc[ingrednum]: # = for every Impact / Amount per specific ingredient
      mu = float(amountrow[ingrednum]) # = amount for ingredient
      std = mu*0.3
      low, high = mu - std, mu + std
      normamo = np.random.uniform(low, high, sim_num) # 10000 simulations requested

      #count, bins, ignored = plt.hist(normamo, 100, density=True)
      #plt.plot(bins, 1/(std * np.sqrt(2 * np.pi)) * np.exp( - (bins - mu)**2 / (2 * std**2) ), linewidth=2, color='r')

      for samo in normamo: # = for every simulated amount of ingredient
        newimp = i_a * samo
        newimplist.append(newimp)

  # Go from 1D List to 2D list
  i_list = to_matrix(newimplist,10000) # <-- n = N

  index_list = ['Acidification','Ecotoxicity','Eutrophication','GWA:excl_bc','GWA:incl_bc','HHPA','HT_c','HT_non-c','Res:Fossil Fuels','Smog']
  iter_il = iter(index_list)

# Make Dataframe of New Impact Factors
  idf = pd.DataFrame(i_list, index = index_list)
  idf2 = idf.T

  # Loop through New Imp DataFrame
  for val in range(0,10,1):
    index = next(iter_il)
    idf3 = idf2[index]
    imin = idf3.min()
    imax = idf3.max()
    imean = np.mean(idf3)
    print(index)
    print(idf3.min(),'Min')
    print(idf3.max(), 'Max')
    print(np.mean(idf3), 'Mean')
    print(' ')
    # Method 2
    #mmmlist.append(imin)
    #mmmlist.append(imax)
    #mmmlist.append(imean)
    #Other Method
    #mmm = [imin,imax,imean]
    #new_dict = {minmaxmean: mmm for minmaxmean, mmm in zip(minmaxmean, mmm)}
    #mmmlist.append(new_dict)

  # Go from 1D List to 2D list
  mmm_2D = to_matrix(mmmlist,3) # <-- n = N
#new_dict = {index_list: mmmlist for index_list, dflist in zip(index_list, mmmlist)}

  # Output DataFrame
  idf4 = pd.DataFrame(mmm_2D, index = index_list, columns=['Min','Max','Mean'])
  idf5= idf4.T

  #updated -- Needs work
  #idf4 = pd.DataFrame(mmmlist)
  #idf5= idf4.T
  #yield idf5

""" Single Ingredient"""

### RUN - ALL ###
'''
for value in monte_carlo(0,10000): <-- first number is ingredient number
  print(value)
'''

"""Automate Monte Carlo Function"""

from functools import reduce

## Every Ingredient
ingred_quantity = 26
ingredients = ingredrow.values


for val in range(0,ingred_quantity,1):
  print(ingredrow[val])
  monte_carlo(val,10000)

'''
# Other Method

frames = []
for val in range(0,ingred_quantity,1):
  print(ingredrow[val])
  for value in monte_carlo(val,10000):
    frames.append(value)
result = pd.concat(frames)
print(result)

#df_merged = reduce(lambda  left,right: pd.merge(left,right,on= minmaxmean,how='outer'), frames)
'''

'''
header = pd.MultiIndex.from_product([ingredients,
                                     index_list],)
                                     ##names=['loc','S']
bigdf = pd.DataFrame(df_merged)
#columns=header
#bigdf = pd.DataFrame(result)
'''

'''
result.to_csv('raw_data.csv', index=True)
'''