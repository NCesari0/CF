# -*- coding: utf-8 -*-
"""HempBlack CruzCool Temp/Humidity Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1flSH6LMw7SmAmqMv-njB1mHsfZcrjy6C
"""

import string
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import datetime as dt
from datetime import datetime,date
from scipy.stats.stats import pearsonr

Gb = pd.read_csv('/content/Greensboro Temp_Humidity 11_28 - 12_12 - Sheet1.csv').assign(Trial = 1)
off = pd.read_csv('/content/(1)-OFFICE - UHADO-16- A0C102627590 Started 11_28_2023, Finished 12_18_2023.csv').assign(Trial = 2)
b_wh = pd.read_csv('/content/(2) - BACK WAREHOUSE - UHADO-16- A0C1032552ZT Started 11_28_2023, Finished 12_18_2023.csv').assign(Trial = 3)
f_wh = pd.read_csv('/content/(3) - FRONT WAREHOUSE - UHADO-16- A0C1032550F5 Started 11_28_2023, Finished 12_18_2023.csv').assign(Trial = 4)
ulist = [off,b_wh,f_wh]
print(Gb.head())

"""Clean Gb and Logtag df's"""

# Change Humidity column from str to int
Gb['Humidity'] = Gb['Humidity'].str.replace(' %','')
Gb['Humidity'] = Gb['Humidity'].astype(int)
Gb['Temperature'] = Gb['Temperature'].str.replace(' °F','')
Gb['Temperature'] = Gb['Temperature'].astype(int)

# Get average Temp & Humidity values based on the date
humavg = Gb.groupby('Date')['Humidity'].mean()
Gb['Temp [C]'] = Gb['Temperature'].apply(lambda x: (x-32) * 5/9)
tempavg = Gb.groupby('Date')['Temp [C]'].mean()

# Groupby object to Dataframe
humavg = humavg.reset_index()
tempavg = tempavg.reset_index()

# Date column to datetime object
humavg['Date'] = humavg['Date'].apply(lambda x: x +'/2023')
humavg['Date'] = pd.to_datetime(humavg['Date'])
humavg = humavg.sort_values(by='Date')
humavg['Date'] = humavg['Date'].astype(str)

# Date column to datetime object
tempavg['Date'] = tempavg['Date'].apply(lambda x: x +'/2023')
tempavg['Date'] = pd.to_datetime(tempavg['Date'])
tempavg = tempavg.sort_values(by='Date')
tempavg['Date'] = tempavg['Date'].astype(str)

# Show Plot
#sns.lineplot(humavg,x='Date',y='Humidity')
plt.show()

# Make b_wh and f_wh dataframes the same size as off
b_wh.drop(b_wh.tail(1).index,inplace=True)
f_wh.drop(f_wh.tail(4).index,inplace=True)

"""Plot Humidity w/o errorbars in legend"""

fig = plt.figure()
ax = plt.subplot(111)
labels = []
phum = []
ptemp =[]
tags = ['office_tag','back_warehouse_tag','front_warhouse_tag']
# Add Column names to each df, make the time the same for each LogTag df
for df,l in zip(ulist,tags):
  df.set_axis(['Reading','Date','Time','Temp','Humidity','NaN','Trial'],
                    axis=1,inplace=True)#,'Hours','dt']
  hum = list(off['Time'])
  df['Time'] = hum
# Drop rows after warehouse data collection 2023-12-12
  for i in range(13,19,1):
    df = df.drop(df[df.Date == '2023-12-{}'.format(i)].index)
  df = df.drop(columns=['Reading','Time','NaN','Trial'])

  # Average Humidity data by date
  df2 = df.groupby('Date')['Humidity'].mean()
  df4 = df.groupby('Date')['Temp'].mean()
  df2 = df2.reset_index()

  hl = list(df2['Date'])
  label = l
  labels.append(label)
  # LogTag Data
  #(either “ci”, “pi”, “se”, or “sd”)
  sns.lineplot(df,x='Date',y='Humidity',label = l,errorbar = 'sd')

# Adjust x-axis labels & bins
labels =[str(x) for x in hl]
plt.xticks(hl,labels=labels,rotation=50)
plt.locator_params(axis='x', nbins=8)

# Adjust plot aesthetics
plt.title('Inner CruzCool Humidity (HempBlack)')
plt.ylim(20,100)
plt.ylabel('Avg. Relative Humidity [%RH]')
plt.xlabel('Date')

plt.show()

fig = plt.figure()
ax = plt.subplot(111)
labels = []
tags = ['office_tag','back_warehouse_tag','front_warhouse_tag']
mean = []
std = []

# Add Column names to each df, make the time the same for each LogTag df
for df,l in zip(ulist,tags):
  df.set_axis(['Reading','Date','Time','Temp','Humidity','NaN','Trial'],
                    axis=1,inplace=True)#,'Hours','dt']
  hum = list(off['Time'])
  df['Time'] = hum
# Drop rows after warehouse data collection 2023-12-12
  for i in range(13,19,1):
    df = df.drop(df[df.Date == '2023-12-{}'.format(i)].index)
  df = df.drop(columns=['Reading','Time','NaN','Trial'])

  # Average Humidity data by date
  df3 = df.groupby('Date')['Temp'].mean()
  df3 = df3.reset_index()
  ptemp.append(pearsonr(tempavg['Temp [C]'],df3['Temp']))
  tl = list(df3['Date'])
  label = l
  labels.append(label)
  # LogTag Data
  #(either “ci”, “pi”, “se”, or “sd”)
  sns.lineplot(df,x='Date',y='Temp',label = l,errorbar = 'sd')

# Adjust x-axis labels & bins
labels =[str(x) for x in hl]
plt.xticks(hl,labels=labels,rotation=50)
plt.locator_params(axis='x', nbins=8)

# Adjust plot aesthetics
plt.title('Inner CruzCool Temperature (HempBlack)')
plt.ylim(-5,25)
plt.ylabel('Avg. Temperature [C]')
plt.xlabel('Date')

plt.show()

# Greensboro Humidity
Gb['Date'] = Gb['Date'].apply(lambda x: x + '/2023')
Gb['Date'] = pd.to_datetime(Gb.Date)
Gb['Date'] = Gb['Date'].astype(str)
Gb2 = Gb.groupby('Date')['Humidity'].mean()
Gb2 = Gb2.reset_index()
gl = list(Gb2['Date'])

sns.lineplot(Gb,x='Date',y='Humidity',label='Greensboro',errorbar = 'sd')
# Adjust x-axis labels & bins
labels =[str(x) for x in gl]
plt.xticks(gl,labels=labels,rotation=50)
plt.ylim(20,100)
plt.locator_params(axis='x', nbins=8)

# Adjust plot aesthetics
plt.title('Greensboro Humidity')
plt.ylabel('Avg. Relative Humidity [%RH]')
plt.xlabel('Date')
plt.show()

# Temperature Plot
Gb3 = Gb.groupby('Date')['Temp [C]'].mean()
Gb3 = Gb3.reset_index()
gl = list(Gb3['Date'])

sns.lineplot(Gb,x='Date',y='Temp [C]',label='Greensboro',errorbar = 'sd')

plt.xticks(gl,labels=labels,rotation=50)
plt.ylim(-5,25)
plt.locator_params(axis='x', nbins=8)

# Adjust plot aesthetics
plt.title('Greensboro Temperature')
plt.ylabel('Avg. Temperature [C]')
plt.xlabel('Date')

"""
Distribution Plot

"""

fig = plt.figure()
ax = plt.subplot(111)
labels = []
tags = ['office_tag','back_warehouse_tag','front_warhouse_tag']
mean =[]
std =[]

# Add Column names to each df, make the time the same for each LogTag df
for df,l in zip(ulist,tags):
  df.set_axis(['Reading','Date','Time','Temp','Humidity','NaN','Trial'],
                    axis=1,inplace=True)#,'Hours','dt']
  hum = list(off['Time'])
  df['Time'] = hum

# Drop rows until the start of distribution data collection 2023-13-12
  for i in range(28,31,1):
    df = df.drop(df[df.Date == '2023-11-{}'.format(i)].index)
  for d in range(1,10,1):
    df = df.drop(df[df.Date == '2023-12-0{}'.format(d)].index)
  df = df.drop(df[df.Date == '2023-12-10'].index)
  df = df.drop(df[df.Date == '2023-12-11'].index)
  df = df.drop(df[df.Date == '2023-12-12'].index)
  df = df.drop(columns=['Reading','Time','NaN','Trial'])

  # Average Humidity data by date
  df3 = df.groupby('Date')['Temp'].mean()
  df3 = df3.reset_index()
  tl = list(df3['Date'])
  label = l
  labels.append(label)
  # LogTag Data
  #(either “ci”, “pi”, “se”, or “sd”)
  sns.lineplot(df,x='Date',y='Temp',label = l,errorbar = 'sd')
print((mean))
print(np.mean(std))
# Adjust x-axis labels & bins
labels =[str(x) for x in tl]
plt.xticks(tl,labels=labels,rotation=50)
plt.locator_params(axis='x', nbins=8)

# Adjust plot aesthetics
plt.title('Inner CruzCool Temperature (Distribution)')
plt.ylim(-5,25)
plt.ylabel('Avg. Temperature [C]')
plt.xlabel('Date')

plt.show()

fig = plt.figure()
ax = plt.subplot(111)
labels = []
tags = ['office_tag','back_warehouse_tag','front_warhouse_tag']

# Add Column names to each df, make the time the same for each LogTag df
for df,l in zip(ulist,tags):
  df.set_axis(['Reading','Date','Time','Temp','Humidity','NaN','Trial'],
                    axis=1,inplace=True)#,'Hours','dt']
  hum = list(off['Time'])
  df['Time'] = hum
  print(np.mean(df['Humidity']))
  print(np.mean(np.std(df['Humidity'])))

# Drop rows until the start of distribution data collection 2023-13-12
  for i in range(28,31,1):
    df = df.drop(df[df.Date == '2023-11-{}'.format(i)].index)
  for d in range(1,10,1):
    df = df.drop(df[df.Date == '2023-12-0{}'.format(d)].index)
  df = df.drop(df[df.Date == '2023-12-10'].index)
  df = df.drop(df[df.Date == '2023-12-11'].index)
  df = df.drop(df[df.Date == '2023-12-12'].index)
  df = df.drop(columns=['Reading','Time','NaN','Trial'])

  # Average Humidity data by date
  df3 = df.groupby('Date')['Temp'].mean()
  df3 = df3.reset_index()
  tl = list(df3['Date'])
  label = l
  labels.append(label)
  # LogTag Data
  #(either “ci”, “pi”, “se”, or “sd”)
  sns.lineplot(df,x='Date',y='Humidity',label = l,errorbar = 'sd')

# Adjust x-axis labels & bins
labels =[str(x) for x in tl]
plt.xticks(tl,labels=labels,rotation=50)
plt.locator_params(axis='x', nbins=8)

# Adjust plot aesthetics
plt.title('Inner CruzCool Humidity (Distribution)')
plt.ylim(20,100)
plt.ylabel('Avg. Relative Humidity [%]')
plt.xlabel('Date')

plt.show()